<?php namespace ProcessWire;
class EmsBasic extends WireData implements Module {
    public static function getModuleInfo() {
        return [
            'title' => 'Ems Basic module',
            'summary' => 'enoja Management System Basis Funktionen',
            'version' => 1,
            'requires' => array(
                'Less>=0.0.3'
            )
        ];
    }
    public function ___install() {
        $fields      = $this->wire('fields');
        $templates   = $this->wire('templates');
        $pages       = $this->wire('pages');
        $fieldgroups = $this->wire('fieldgroups');
        $config      = $this->wire('config');

        $fieldTitle = $fields->get('title');

		if(!$fields->get('metadescription')) {
			$metadescription = new Field;
			$metadescription->type = $this->modules->get('FieldtypeText');
			$metadescription->name = "metadescription";
			$metadescription->label = 'Metadescription';
			$metadescription->save();
            $this->message('Field created: Metadescription');
		}

        if(!$fields->get('metakeywords')) {
			$metakeywords = new Field;
			$metakeywords->type = $this->modules->get('FieldtypeText');
			$metakeywords->name = "metakeywords";
			$metakeywords->label = 'Metakeywords';
			$metakeywords->save();
            $this->message('Field created: Metakeywords');
		}

        if(!$fields->get('metatitle')) {
			$metatitle = new Field;
			$metatitle->type = $this->modules->get('FieldtypeText');
			$metatitle->name = "metatitle";
			$metatitle->label = 'Metatitle';
			$metatitle->save();
            $this->message('Field created: Metatitle');
		}


        if(!$templates->get('container')) {
            if (!$fieldgroups->get("container")) {
                $fieldgroup = new Fieldgroup();
                $fieldgroup->name = "container";
                $fieldgroup->add($fieldTitle); // add some fields
                $fieldgroup->save();
            } else {
                $fieldgroup = $fieldgroups->get("container");
            }

            $container = new Template;
            $container->name = "container";
            $container->label = "container";
            $container->fieldgroup = $fieldgroup;
            $container->icon = "fa-folder-open";
            $container->save();
            $this->message('Template created: container');

            $advanced = new Page;
            $advanced->template = "container";
            $advanced->parent = 1;
            $advanced->name = "advanced";
            $advanced->title = $this->_('Advanced');
            $advanced->save();
            $this->message('Page created: advanced');

            // Generate Children
            $header = new Page;
            $header->template = "container";
            $header->parent = $advanced->id;
            $header->name = "header";
            $header->title = "header";
            $header->save();
            $this->message('Page created: header');

            $footer = new Page;
            $footer->template = "container";
            $footer->parent = $advanced->id;
            $footer->name = "footer";
            $footer->title = "footer";
            $footer->save();
            $this->message('Page created: footer');

            $innerwrapper = new Page;
            $innerwrapper->template = "container";
            $innerwrapper->parent = $advanced->id;
            $innerwrapper->name = "innerwrapper";
            $innerwrapper->title = "innerwrapper";
            $innerwrapper->save();
            $this->message('Page created: innerwrapper');

            if(!$fields->get('classes')) {
                $classes = new Field;
                $classes->type = $this->modules->get('FieldtypePage');
                $classes->name = "classes";
                $classes->label = "classes";
                $classes->parent_id = $advanced->id;
                $classes->template_id = $advanced->template->id;
                $classes->save();
                $this->message('Field created: classes');
    
                if(!$fields->get('wrapper')) {
                    $repeaterFg = new Fieldgroup();
                    $repeaterFg->name = "repeater_wrapper";
                    $repeaterFg->append($classes);                    
                    $repeaterFg->save();
                    
                    $wrapper = new Field;
                    $wrapper->type = $this->modules->get('FieldtypeRepeater');
                    $wrapper->name = "wrapper";
                    $wrapper->label = "wrapper";
                    $wrapper->fieldgroup = $repeaterFg;
                    $wrapper->save();
                    $wrapper->save();
                    $this->message('Field created: wrapper');
                }
            }
        }

        if(!$templates->get('head')) {
            if (!$fieldgroups->get("head")) {
                $fieldgroup = new Fieldgroup();
                $fieldgroup->name = "head";
                $fieldgroup->add($fieldTitle); // add some fields
                $fieldgroup->add($wrapper);
                $fieldgroup->save();
            } else {
                $fieldgroup = $fieldgroups->get("head");
            }

            $head = new Template;
            $head->name = "head";
            $head->fieldgroup = $fieldgroup;
            $head->icon = "fa-long-arrow-up";
            $head->save();
            $this->message('Template created: head');

            $phead = new Page;
            $phead->template = "head";
            $phead->parent = 1;
            $phead->name = "head";
            $phead->title = "head";
            $phead->save();
            $this->message('Page created: head');
        }

        if(!$templates->get('foot')) {
            if (!$fieldgroups->get("foot")) {
                $fieldgroup = new Fieldgroup();
                $fieldgroup->name = "foot";
                $fieldgroup->add($fieldTitle); // add some fields
                $fieldgroup->add($wrapper);
                $fieldgroup->save();
            } else {
                $fieldgroup = $fieldgroups->get("foot");
            }

            $foot = new Template;
            $foot->name = "foot";
            $foot->fieldgroup = $fieldgroup;
            $foot->icon = "fa-long-arrow-down";
            $foot->save();
            $this->message('Template created: foot');

            $pfoot = new Page;
            $pfoot->template = "foot";
            $pfoot->parent = 1;
            $pfoot->name = "foot";
            $pfoot->title = "foot";
            $pfoot->save();
            $this->message('Page created: foot');
        }

        if(!$templates->get('page-home') && $templates->get('home')) {
            $phome = $templates->get('home');
            //$phome->of(false);
            $phome->name = "page-home";
            $phome->addTag("page");
            $phome->save();
            $this->message('Page renamed: home to page-home');

            $fghome = $fieldgroups->get('home');
            $fghome->name = "page-home";
            $fghome->save();
            $fghome->add($metadescription);
            $fghome->add($metakeywords);
            $fghome->add($metatitle);
            $fghome->save();

            $phome->fieldgroup = $fghome;
            
            $this->message('Page page-home: Fields added');
        }

        if(!$templates->get('page-basic') && $templates->get('basic-page')) {
            $phome = $templates->get('basic-page');
            //$phome->of(false);
            $phome->name = "page-basic";
            $phome->addTag("page");
            $phome->save();
            $this->message('Page renamed: basic-page to page-basic');

            $fghome = $fieldgroups->get('basic-page');
            $fghome->name = "page-basic";
            $fghome->save();
            $fghome->add($metadescription);
            $fghome->add($metakeywords);
            $fghome->add($metatitle);
            $fghome->save();

            $phome->fieldgroup = $fghome;
            $this->message('Page page-home: Fields added');
        }

        $modulePath = $config->paths->siteModules . 'EmsBasic/';

        // Copy all templates to templates Folder
        copy($modulePath.'less/admin.less', $config->paths->templates.'admin.less');

        copy($modulePath.'template/_footer.php', $config->paths->templates.'_footer.php');
        copy($modulePath.'template/_header.php', $config->paths->templates.'_header.php');
    }
    public function ___uninstall() {
        $fields      = $this->wire('fields');
        $fieldgroups = $this->wire('fieldgroups');
        $templates   = $this->wire('templates');
        $pages       = $this->wire('pages');
        $config      = $this->wire('config');

		// find and delete the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.

        /* First we find all Pages with templates
        head
        foot
        container
        */

        foreach($pages->get(1)->children("template=head|foot|container") as $p) {
            $this->message('Deleted Page: '.$p->title);
            $p->delete(true);
        }

        /* Next we find the templates we installed */
        foreach ($templates->find("name=head|foot|container") as $t) {
            $title = $t->name;
            $templates->delete($t);
            $fieldgroups->delete($t->fieldgroup);
            $this->message('Deleted Template: '.$title);
        }

        
        /* Remove all fields form page-basic and page-home */
        $metadescription = $fields->get("metadescription");
        $metakeywords = $fields->get("metakeywords");
        $metatitle = $fields->get("metatitle");

        foreach ($templates->find("name=page-basic|page-home") as $t) {
            $t->removeTag("page");
            $t->save();
        }


        $fghome = $fieldgroups->get("page-home");
        $fghome->remove($metadescription);
        $fghome->remove($metakeywords);
        $fghome->remove($metatitle);

        $this->message("Removed Fields 'metadescription', 'metakeywords', 'metatitle' in Template: page-home");

        $fghome = $fieldgroups->get("page-basic");
        $fghome->remove($metadescription);
        $fghome->remove($metakeywords);
        $fghome->remove($metatitle);

        $this->message("Removed Fields 'metadescription', 'metakeywords', 'metatitle' in Template: page-home");
        
        if ($fields->get("wrapper")) {
            $wrapper = $fields->get("wrapper");
            $fieldgroups->delete($wrapper->fieldgroup);
            $fields->delete($wrapper);

                
            //$wrapper = $fieldgroups->get("repeater_wrapper");
            //$fieldgroups->delete($wrapper);
            $this->message("Deleted Fields 'wrapper'");
        }
        
        if ($fields->get("classes")) {
            $classes = $fields->get("classes");
            $fields->delete($classes);
            $this->message("Deleted Fields 'classes'");
        }

        /* Rename */
        if($templates->get('page-home') && !$templates->get('home')) {
            $phome = $templates->get('page-home');
            //$phome->of(false);
            $phome->name = "home";
            $phome->save();
            $this->message('Renamed Template: page-home to home');

            $fghome = $fieldgroups->get('page-home');
            $fghome->name = "home";
            $fghome->save();
        }

        if($templates->get('page-basic') && !$templates->get('basic-page')) {
            $phome = $templates->get('page-basic');
            //$phome->of(false);
            $phome->name = "basic-page";
            $phome->save();
            $this->message('Renamed Template: page-basic to basic-page');

            $fghome = $fieldgroups->get('page-basic');
            $fghome->name = "basic-page";
            $fghome->save();
        }

        /* Delete the Fields */
        $fields->delete($metadescription);
        $fields->delete($metakeywords);
        $fields->delete($metatitle);
        $this->message("Deleted Fields 'metadescription', 'metakeywords', 'metatitle'");

        unlink($config->paths->templates.'admin.less');

        unlink($config->paths->templates.'_footer.php');
        unlink($config->paths->templates.'_header.php');
    }

    public function wrapper($wrapper,$markup,$id="",$tag="div") {
        $wrapper = $wrapper->reverse();
        if ($wrapper->count() > 0) {
            foreach ($wrapper as $wrap) {
                if ($wrap === $wrapper->last()) {
                    $newtag = $tag;
                } else {
                    $newtag = "div";
                }
                $markup = $this->wrapperClass($wrap->classes->implode(' ','title'),$markup,$id,$newtag);
            }
        } else {
            $markup = $this->wrapperClass("",$markup,$id,$tag);
        }

        return $markup;
    }

    public function wrapperClass($class,$markup,$id="",$tag="div") {
        $return = '
        <'.$tag;
        if ($class != "") {
            $return .= ' class="'.$class.'"';
        }
        if ($id != "") {
            $return .= ' id="'.$id.'"';
        }
        $return .= '>'.
            $markup.'
        </'.$tag.'>';
        return $return;
    }

    public function allowedtemps($tag) {
        $allowedtemplates = wire("templates")->find("tags=".$tag);
        $allowedtemps = "";
        foreach ($allowedtemplates as $allowedtemplate) {
            if ($allowedtemps != "") {
                $allowedtemps .= "|";
            }
            $allowedtemps .= $allowedtemplate->name;
        }
        return $allowedtemps;
    }
}